{"version":3,"file":"commonHelpers2.js","sources":["../src/js/02-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\r\nimport \"flatpickr/dist/flatpickr.min.css\";\r\nimport iziToast from \"izitoast\";\r\n\r\nconst refs = {\r\n  button: document.querySelector(\"button[data-start]\"),\r\n  days: document.querySelector(\"span[data-days]\"),\r\n  hours: document.querySelector(\"span[data-hours]\"),\r\n  minutes: document.querySelector(\"span[data-minutes]\"),\r\n  seconds: document.querySelector(\"span[data-seconds]\"),\r\n};\r\n\r\nlet futureDate = \"\";\r\n\r\nrefs.button.disabled = true;\r\n\r\nrefs.button.addEventListener(\"click\", onDateButtonClick);\r\n\r\nconst options = {\r\n  enableTime: true,\r\n  time_24hr: true,\r\n  defaultDate: new Date(),\r\n  minuteIncrement: 1,\r\n  onClose(selectedDates) {\r\n    checkPastDate(selectedDates[0]);\r\n    futureDate = selectedDates[0];\r\n  },\r\n};\r\n\r\nflatpickr(\"#datetime-picker\", options);\r\n\r\nfunction onDateButtonClick() {\r\n  let intervalId = setInterval(() => {\r\n    const nowDate = new Date();\r\n    const interval = futureDate - nowDate;\r\n    const result = convertMs(interval);\r\n\r\n    renderDigits(result);\r\n\r\n    if (interval <= 0) {\r\n      clearInterval(intervalId);\r\n      showToast(\"Time is over\");\r\n      renderDigits(result, \"00\");\r\n    }\r\n  }, 1000);\r\n}\r\n\r\nfunction checkPastDate(date) {\r\n  const checkValue = date - new Date() < 0;\r\n  refs.button.disabled = checkValue ? true : false;\r\n  if (checkValue) {\r\n    showToast(\"Please select a date in the future\");\r\n  }\r\n}\r\n\r\nfunction showToast(text) {\r\n  iziToast.show({\r\n    title: \"Notice\",\r\n    message: text,\r\n    position: \"topCenter\",\r\n    color: \"blue\",\r\n  });\r\n}\r\n\r\nfunction addLeadingZero(value) {\r\n  return value.toString().padStart(2, \"0\");\r\n}\r\n\r\nfunction convertMs(ms) {\r\n  const second = 1000;\r\n  const minute = second * 60;\r\n  const hour = minute * 60;\r\n  const day = hour * 24;\r\n\r\n  const days = Math.floor(ms / day);\r\n  const hours = Math.floor((ms % day) / hour);\r\n  const minutes = Math.floor(((ms % day) % hour) / minute);\r\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\r\n\r\n  return { days, hours, minutes, seconds };\r\n}\r\n\r\nfunction renderDigits(obj, string) {\r\n  Object.keys(obj).map((key) => (refs[key].textContent = !!string ? string : addLeadingZero(obj[key])));\r\n}\r\n"],"names":["refs","futureDate","onDateButtonClick","options","selectedDates","checkPastDate","flatpickr","intervalId","nowDate","interval","result","convertMs","renderDigits","showToast","date","checkValue","text","iziToast","addLeadingZero","value","ms","days","hours","minutes","seconds","obj","string","key"],"mappings":"+IAIA,MAAMA,EAAO,CACX,OAAQ,SAAS,cAAc,oBAAoB,EACnD,KAAM,SAAS,cAAc,iBAAiB,EAC9C,MAAO,SAAS,cAAc,kBAAkB,EAChD,QAAS,SAAS,cAAc,oBAAoB,EACpD,QAAS,SAAS,cAAc,oBAAoB,CACtD,EAEA,IAAIC,EAAa,GAEjBD,EAAK,OAAO,SAAW,GAEvBA,EAAK,OAAO,iBAAiB,QAASE,CAAiB,EAEvD,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBC,EAAcD,EAAc,EAAE,EAC9BH,EAAaG,EAAc,EAC5B,CACH,EAEAE,EAAU,mBAAoBH,CAAO,EAErC,SAASD,GAAoB,CAC3B,IAAIK,EAAa,YAAY,IAAM,CACjC,MAAMC,EAAU,IAAI,KACdC,EAAWR,EAAaO,EACxBE,EAASC,EAAUF,CAAQ,EAEjCG,EAAaF,CAAM,EAEfD,GAAY,IACd,cAAcF,CAAU,EACxBM,EAAU,cAAc,EACxBD,EAAaF,EAAQ,IAAI,EAE5B,EAAE,GAAI,CACT,CAEA,SAASL,EAAcS,EAAM,CAC3B,MAAMC,EAAaD,EAAO,IAAI,KAAS,EACvCd,EAAK,OAAO,SAAW,EAAAe,EACnBA,GACFF,EAAU,oCAAoC,CAElD,CAEA,SAASA,EAAUG,EAAM,CACvBC,EAAS,KAAK,CACZ,MAAO,SACP,QAASD,EACT,SAAU,YACV,MAAO,MACX,CAAG,CACH,CAEA,SAASE,EAAeC,EAAO,CAC7B,OAAOA,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG,CACzC,CAEA,SAASR,EAAUS,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASZ,EAAaa,EAAKC,EAAQ,CACjC,OAAO,KAAKD,CAAG,EAAE,IAAKE,GAAS3B,EAAK2B,GAAK,YAAgBD,GAAkBR,EAAeO,EAAIE,EAAI,CAAE,CACtG"}